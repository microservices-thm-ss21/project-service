openapi: 3.0.3
info:
  title: API Specification for Project-Service
  description: API Specification for Project-Service
  version: 1.0.0
servers:
  - url: 'http://localhost:8069/api/projects'
tags:
  - name: Projects
    description: Projects saved within the project service
  - name: Members
    description: Members of Projects saved within the project service
paths:
  /:
    get:
      description: |
        Returns all Projects saved within the project service
      tags:
        - Projects
      responses:
        '200':
          description: List of Projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfProjects'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /{projectName}:
    post:
      description: Creates a new Project
      tags:
        - Projects
      parameters:
        - name: projectName
          in: path
          description: Name of the new project
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

  /{projectId}:
    get:
      description: Get project with the given id
      tags:
        - Projects
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: project not found
        default:
          description: unexpected error
          content:
           application/json:
              schema:
                type: string
    delete:
      description: Delete project of the given id
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: ID of project
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
      responses:
        '204':
          description: Successfully deleted project
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Requester does not have correct access rights
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

  /{projectId}/name/{projectName}:
    put:
      description: Update project name with the given id
      tags:
        - Projects
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
        - name: projectName
          in: path
          description: New name of the project
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Requester does not have correct access rights
        '404':
          description: Project not found
        '409':
          description: Either Project creator or Member(s) does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /user/{userId}:
    put:
      description: Get all projects of the user
      tags:
        - Projects
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
      responses:
        '200':
          description: All projects of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfProjects'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

  /{projectId}/members/user/{userId}/role/{userRole}:
    post:
      description: Add a user to a project and give him/her a projectRole
      tags:
        - Members
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
        - name: userRole
          in: path
          description: Role of user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: All projects of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfProjects'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Authentication information is missing or invalid
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

  /{projectId}/members:
    get:
      description: Get all members of a project with the given id
      tags:
        - Members
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
      responses:
        '200':
          description: Members of Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfMembers'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /{projectId}/members/{userId}/exists:
    get:
      tags:
        - Members
      description: Returns the information if a user is member of a project
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
      responses:
        '200':
          description: Information if user is member of project or not
          content:
            application/json:
              schema:
                type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

  /{projectId}/members/user/{userId}/role/{role}:
    put:
      description: Update the user role inside project
      tags:
        - Members
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
        - name: role
          in: path
          description: new role
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated Members of Project with given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfMembers'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Project or Member(s) does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /{projectId}/members/user/{userId}:
    delete:
      description: Delete a user from a project
      tags:
        - Members
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
      responses:
        '204':
          description: Successfully deleted members
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
  schemas:
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        creatorId:
          type: string
          format: uuid
        createTime:
          type: string
          format: date-time
    ArrayOfProjects:
      type: array
      items:
        $ref: '#/components/schemas/Project'
    Member:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        projectRole:
          type: string
    ArrayOfMembers:
      type: array
      items:
        $ref: '#/components/schemas/Member'
